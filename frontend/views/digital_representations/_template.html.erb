<% define_template "digital_representation", jsonmodel_definition(:digital_representation) do |form| %>
  <div class="subrecord-form-fields">

    <% if form.obj['deaccessioned'] %>
      <div class="row">
        <div class="col-sm-12">
          <div class="alert alert-info record-is-deaccessioned">
            <%= I18n.t('digital_representation.deaccessioned') %>
          </div>
        </div>
      </div>
    <% end %>

    <%= form.hidden_input "existing_ref" %>

    <%= render_aspace_partial :partial => 'shared/qsa_id_form', :locals => {:form => form, :model => :digital_representation} %>
    <%= form.label_and_textfield "title" %>
    <%= form.label_and_textarea "description" %>
    <%= form.label_and_textarea "previous_system_identifiers" %>
    <%= form.label_and_textfield "agency_assigned_id" %>

    <% if !form.readonly? && form.obj['publishable'] == false %>
      <div class="form-group">
        <label class="control-label col-sm-2" for="<%= form.id_for('publish') %>">Publish?</label>
        <div class="checkbox col-sm-9">
          <input id="<%= form.id_for('publish') %>"
                 type="checkbox"
                 value="0"
                 disabled="disabled" />
          <span class="help-inline"><span class="text-muted">Record cannot be published due to RAP restriction</span></span>
        </div>
      </div>
    <% else %>
      <%= form.label_and_boolean "publish" %>
    <% end %>

    <%= render_aspace_partial :partial => 'shared/archivist_approval_fields', :locals => {:form => form} %>

    <%= form.label_and_select "accessioned_status", form.possible_options_for("accessioned_status", true) %>
    <%= form.label_and_textarea "other_restrictions_notes" %>
    <%= form.label_and_select "contained_within", form.possible_options_for("contained_within", true) %>
    <%= form.label_and_textfield "file_size" %>
    <%= form.label_and_select "file_type", form.possible_options_for("file_type", true) %>
    <%= form.label_and_select "colour", form.possible_options_for("colour", true) %>
    <%= form.label_and_select "intended_use", form.possible_options_for("intended_use", true) %>
    <%= form.label_and_select "file_issue_allowed", form.possible_options_for("file_issue_allowed") %>
    <%= form.label_and_textarea "processing_handling_notes" %>
    <%= form.label_and_select "preservation_priority_rating", form.possible_options_for("preservation_priority_rating", true) %>
    <%= form.label_and_textarea "preservation_notes" %>
    <%= form.label_and_boolean "exhibition_quality" %>
    <%= form.label_and_textarea "exhibition_history" %>
    <%= form.label_and_textarea "exhibition_notes" %>
    <%= form.label_and_textarea "remarks" %>
    <%= form.label_and_date "original_registration_date" %>


    <%# these not listed in the story so leaving here %>
    <%= form.label_and_textarea "preferred_citation" %>
    <%= form.label_and_select "image_resource_type", form.possible_options_for("image_resource_type", true) %>

    <% form.push('representation_file', (form.obj['representation_file'] || {})) do |form| %>
      <% if form.readonly? %>
        <% unless !form.obj['key'] %>
          <div class="form-group">
            <label class="col-sm-2 control-label"><%= I18n.t('representation_file.attached_file') %></label>
            <div class="col-sm-9">
              <%= link_to(I18n.t("representation_file.view_file"),
                          {
                            :controller => :representations,
                            :action => :view_file,
                            :key => form.obj['key'],
                            :mime_type => form.obj['mime_type'],
                          },
                          {
                            :class => "view-representation-file-link label-only",
                            :target => "_blank",
                          })
              %>
            </div>
          </div>
        <% end %>
      <% else %>
        <div class="representation-file-widget form-group">
          <label class="col-sm-2 control-label"><%= I18n.t('representation_file.attached_file') %></label>
          <div class="col-sm-9">
            <%= form.hidden_input('key', form.obj['key'], {:class => 'representation-file-key-input'}) %>
            <%= form.hidden_input('mime_type', form.obj['mime_type'], {:class => 'representation-file-mime-type-input'}) %>

            <% if form.obj['key'] %>
              <%= link_to(I18n.t("representation_file.view_file"),
                          {
                            :controller => :representations,
                            :action => :view_file,
                            :key => form.obj['key'],
                            :mime_type => form.obj['mime_type'],
                          },
                          {
                            :class => "view-representation-file-link label-only",
                            :target => "_blank",
                          })
              %>
            <% end %>

            <span style="display: none" class="representation-file-upload-label"><%= I18n.t("representation_file.upload") %></span>
            <span style="display: none" class="representation-file-replace-label"><%= I18n.t("representation_file.upload_replace") %></span>
            <span style="display: none" class="representation-file-uploading-label"><%= I18n.t("representation_file.uploading") %></span>
            <button style="display: none" class="btn btn-xs btn-primary representation-file-upload"></button>
            <button style="display: none" class="btn btn-xs btn-cancel representation-file-clear">
              <%= I18n.t("representation_file.upload_clear") %>
            </button>

            <% unless form.obj['key'] %>
              <%# Hidden link that will be used if the user uploads a new file %>
              <%= link_to(I18n.t("representation_file.view_file"),
                          {
                            :controller => :representations,
                            :action => :view_file,
                          },
                          {
                            :class => "view-representation-file-link label-only",
                            :target => "_blank",
                            :style => "display: none;",
                          })
              %>
            <% end %>
          </div>
        </div>
      <% end %>
    <% end %>

    <div class="subrecord-form-container">
      <% if form.readonly? %>
        <%= show_plugins_for(JSONModel(:digital_representation).from_hash(form.obj, false, true), form) %>
      <% else %>
        <%= form_plugins_for("digital_representation", form, JSONModel(:digital_representation).from_hash(form.obj, false, true)) %>
      <% end %>

      <% unless form.readonly? && ASUtils.wrap(form.obj['deaccessions']).empty? %>
        <%= render_aspace_partial :partial => "shared/subrecord_form", :locals => {:form => form, :name => "deaccessions"} %>
      <% end %>
    </div>
  </div>
<% end %>

<% define_template "digital_representation_quick_add", jsonmodel_definition(:digital_representation) do |form| %>
  <div class="subrecord-form-fields">
    <%= form.hidden_input "file_issue_allowed", "allowed_true" %>

    <%= render_aspace_partial :partial => 'shared/qsa_id_form', :locals => {:form => form, :model => :digital_representation} %>
    <%= form.label_and_textfield "title" %>
    <%= form.label_and_select "contained_within", form.possible_options_for("contained_within", false), :field_opts => {:default => 'Network Attached Storage (NAS)'} %>
    <%= form.label_and_boolean "publish" %>

    <%= render_aspace_partial :partial => 'shared/archivist_approval_fields', :locals => {:form => form} %>

    <% form.push('representation_file', (form.obj['representation_file'] || {})) do |form| %>
      <div class="representation-file-widget form-group">
        <label class="col-sm-2 control-label"><%= I18n.t('representation_file.attached_file') %></label>
        <div class="col-sm-9">
          <%= form.hidden_input('key', form.obj['key'], {:class => 'representation-file-key-input'}) %>
          <%= form.hidden_input('mime_type', form.obj['mime_type'], {:class => 'representation-file-mime-type-input'}) %>

          <% if form.obj['key'] %>
            <%= link_to(I18n.t("representation_file.view_file"),
                        {
                            :controller => :representations,
                            :action => :view_file,
                            :key => form.obj['key'],
                            :mime_type => form.obj['mime_type'],
                        },
                        {
                            :class => "view-representation-file-link label-only",
                            :target => "_blank",
                        })
            %>
          <% end %>

          <span style="display: none" class="representation-file-upload-label"><%= I18n.t("representation_file.upload") %></span>
          <span style="display: none" class="representation-file-replace-label"><%= I18n.t("representation_file.upload_replace") %></span>
          <span style="display: none" class="representation-file-uploading-label"><%= I18n.t("representation_file.uploading") %></span>
          <button style="display: none" class="btn btn-xs btn-primary representation-file-upload"></button>
          <button style="display: none" class="btn btn-xs btn-cancel representation-file-clear">
            <%= I18n.t("representation_file.upload_clear") %>
          </button>

          <% unless form.obj['key'] %>
            <%# Hidden link that will be used if the user uploads a new file %>
            <%= link_to(I18n.t("representation_file.view_file"),
                        {
                            :controller => :representations,
                            :action => :view_file,
                        },
                        {
                            :class => "view-representation-file-link label-only",
                            :target => "_blank",
                            :style => "display: none;",
                        })
            %>
          <% end %>
        </div>
      </div>
    <% end %>
  </div>
<% end %>


<script>
  if (!window.RepresentationFilesLoaded) {
    window.RepresentationFilesLoaded = true;
    new RepresentationFiles();
  }
</script>
